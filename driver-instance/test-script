#!/bin/bash
# This scipt will test VersaStack-onos REST Driver in Coronet

clear


domain1_driver=VM1-driver.xml		#domain1 driver file, 7-node metro1
domain2_driver=VM2-driver.xml		#domain2 driver file, 75-node coronet
domain3_driver=VM3-driver.xml		#domain3 driver file, 7-node metro2 
stub_driver=driver-stub-3nets.xml	#virtual links that connects 3 domains

workflow_file=onos-workflow.xml		#workflow file



function verify_city(){
  if [ "$1" == "Abilene" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000004b:port-s75-eth1"
  elif [ "$1" == "Albany" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000001:port-s1-eth1"
  elif [ "$1" == "Albuquerque" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000002:port-s2-eth1"
  elif [ "$1" == "Atlanta" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000003:port-s3-eth1"
  elif [ "$1" == "Austin" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000004:port-s4-eth1"
  elif [ "$1" == "Baltimore" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000005:port-s5-eth1"
  elif [ "$1" == "Baton_Rouge" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000006:port-s6-eth1"
  elif [ "$1" == "Billings" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000007:port-s7-eth1"
  elif [ "$1" == "Birmingham" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000008:port-s8-eth1"
  elif [ "$1" == "Bismarck" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000009:port-s9-eth1"
  elif [ "$1" == "Boston" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000000a:port-s10-eth1"
  elif [ "$1" == "Buffalo" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000000b:port-s11-eth1"
  elif [ "$1" == "Charleston" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000000c:port-s12-eth1"
  elif [ "$1" == "Charlotte" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000000d:port-s13-eth1"
  elif [ "$1" == "Chicago" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000000e:port-s14-eth1"
  elif [ "$1" == "Cincinnati" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000000f:port-s15-eth1"
  elif [ "$1" == "Cleveland" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000010:port-s16-eth1"
  elif [ "$1" == "Columbus" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000011:port-s17-eth1"
  elif [ "$1" == "Dallas" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000012:port-s18-eth1"
  elif [ "$1" == "Denver" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000013:port-s19-eth1"
  elif [ "$1" == "Detroit" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000014:port-s20-eth1"
  elif [ "$1" == "El_Paso" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000015:port-s21-eth1"
  elif [ "$1" == "Fresno" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000016:port-s22-eth1"
  elif [ "$1" == "Greensboro" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000017:port-s23-eth1"
  elif [ "$1" == "Hartford" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000018:port-s24-eth1"
  elif [ "$1" == "Houston" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000019:port-s25-eth1"
  elif [ "$1" == "Jacksonville" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000001a:port-s26-eth1"
  elif [ "$1" == "Kansas_City" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000001b:port-s27-eth1"
  elif [ "$1" == "Las_Vegas" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000001c:port-s28-eth1"
  elif [ "$1" == "Little_Rock" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000001d:port-s29-eth1"
  elif [ "$1" == "Long_Island" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000001e:port-s30-eth1"
  elif [ "$1" == "Los_Angeles" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000001f:port-s31-eth1"
  elif [ "$1" == "Louisville" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000020:port-s32-eth1"
  elif [ "$1" == "Memphis" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000021:port-s33-eth1"
  elif [ "$1" == "Miami" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000022:port-s34-eth1"
  elif [ "$1" == "Milwaukee" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000023:port-s35-eth1"
  elif [ "$1" == "Minneapolis" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000024:port-s36-eth1"
  elif [ "$1" == "Nashville" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000025:port-s37-eth1"
  elif [ "$1" == "New_Orleans" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000026:port-s38-eth1"
  elif [ "$1" == "New_York" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000027:port-s39-eth1"
  elif [ "$1" == "Newark" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000028:port-s40-eth1"
  elif [ "$1" == "Norfolk" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000029:port-s41-eth1"
  elif [ "$1" == "Oakland" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000002a:port-s42-eth1"
  elif [ "$1" == "Oklahoma_City" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000002b:port-s43-eth1"
  elif [ "$1" == "Omaha" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000002c:port-s44-eth1"
  elif [ "$1" == "Orlando" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000002d:port-s45-eth1"
  elif [ "$1" == "Philadelphia" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000002e:port-s46-eth1"
  elif [ "$1" == "Phoenix" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000002f:port-s47-eth1"
  elif [ "$1" == "Pittsburgh" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000030:port-s48-eth1"
  elif [ "$1" == "Portland" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000031:port-s49-eth1"
  elif [ "$1" == "Providence" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000032:port-s50-eth1"
  elif [ "$1" == "Raleigh" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000033:port-s51-eth1"
  elif [ "$1" == "Richmond" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000034:port-s52-eth1"
  elif [ "$1" == "Rochester" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000035:port-s53-eth1"
  elif [ "$1" == "Sacramento" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000036:port-s54-eth1"
  elif [ "$1" == "Salt_Lake_City" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000037:port-s55-eth1"
  elif [ "$1" == "San_Antonio" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000038:port-s56-eth1"
  elif [ "$1" == "San_Diego" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000039:port-s57-eth1"
  elif [ "$1" == "San_Francisco" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000003a:port-s58-eth1"
  elif [ "$1" == "San_Jose" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000003b:port-s59-eth1"
  elif [ "$1" == "Santa_Barbara" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000003c:port-s60-eth1"
  elif [ "$1" == "Scranton" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000003d:port-s61-eth1"
  elif [ "$1" == "Seattle" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000003e:port-s62-eth1"
  elif [ "$1" == "Spokane" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000003f:port-s63-eth1"
  elif [ "$1" == "Springfield" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000040:port-s64-eth1"
  elif [ "$1" == "St_Louis" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000041:port-s65-eth1"
  elif [ "$1" == "Syracuse" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000042:port-s66-eth1"
  elif [ "$1" == "Tallahassee" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000043:port-s67-eth1"
  elif [ "$1" == "Tampa" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000044:port-s68-eth1"
  elif [ "$1" == "Toledo" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000045:port-s69-eth1"
  elif [ "$1" == "Tucson" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000046:port-s70-eth1"
  elif [ "$1" == "Tulsa" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000047:port-s71-eth1"
  elif [ "$1" == "Washington_DC" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000048:port-s72-eth1"
  elif [ "$1" == "West_Palm_Beach" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:0000000000000049:port-s73-eth1"
  elif [ "$1" == "Wilmington" ] ; then
	echo "urn:ogf:network:onos.maxgigapop.net:network2:of:000000000000004a:port-s74-eth1"
  else
	echo "Error"
  fi
}


function verify_number(){
  if   [ "$1" == 75 ]; then echo  "Abilene"
  elif [ "$1" == 1  ]; then echo  "Albany"
  elif [ "$1" == 2  ]; then echo  "Albuquerque"
  elif [ "$1" == 3  ]; then echo  "Atlanta"
  elif [ "$1" == 4  ]; then echo  "Austin"
  elif [ "$1" == 5  ]; then echo  "Baltimore"
  elif [ "$1" == 6  ]; then echo  "Baton_Rouge"
  elif [ "$1" == 7  ]; then echo  "Billings"
  elif [ "$1" == 8  ]; then echo  "Birmingham"
  elif [ "$1" == 9  ]; then echo  "Bismarck"
  elif [ "$1" == 10 ]; then echo  "Boston"
  elif [ "$1" == 11 ]; then echo  "Buffalo"
  elif [ "$1" == 12 ]; then echo  "Charleston"
  elif [ "$1" == 13 ]; then echo  "Charlotte"
  elif [ "$1" == 14 ]; then echo  "Chicago"
  elif [ "$1" == 15 ]; then echo  "Cincinnati"
  elif [ "$1" == 16 ]; then echo  "Cleveland"
  elif [ "$1" == 17 ]; then echo  "Columbus"
  elif [ "$1" == 18 ]; then echo  "Dallas"
  elif [ "$1" == 19 ]; then echo  "Denver"
  elif [ "$1" == 20 ]; then echo  "Detroit"
  elif [ "$1" == 21 ]; then echo  "El_Paso"
  elif [ "$1" == 22 ]; then echo  "Fresno"
  elif [ "$1" == 23 ]; then echo  "Greensboro"
  elif [ "$1" == 24 ]; then echo  "Hartford"
  elif [ "$1" == 25 ]; then echo  "Houston"
  elif [ "$1" == 26 ]; then echo  "Jacksonville"
  elif [ "$1" == 27 ]; then echo  "Kansas_City"
  elif [ "$1" == 28 ]; then echo  "Las_Vegas"
  elif [ "$1" == 29 ]; then echo  "Little_Rock"
  elif [ "$1" == 30 ]; then echo  "Long_Island"
  elif [ "$1" == 31 ]; then echo  "Los_Angeles"
  elif [ "$1" == 32 ]; then echo  "Louisville"
  elif [ "$1" == 33 ]; then echo  "Memphis"
  elif [ "$1" == 34 ]; then echo  "Miami"
  elif [ "$1" == 35 ]; then echo  "Milwaukee"
  elif [ "$1" == 36 ]; then echo  "Minneapolis"
  elif [ "$1" == 37 ]; then echo  "Nashville"
  elif [ "$1" == 38 ]; then echo  "New_Orleans"
  elif [ "$1" == 39 ]; then echo  "New_York"
  elif [ "$1" == 40 ]; then echo  "Newark"
  elif [ "$1" == 41 ]; then echo  "Norfolk"
  elif [ "$1" == 42 ]; then echo  "Oakland"
  elif [ "$1" == 43 ]; then echo  "Oklahoma_City"
  elif [ "$1" == 44 ]; then echo  "Omaha"
  elif [ "$1" == 45 ]; then echo  "Orlando"
  elif [ "$1" == 46 ]; then echo  "Philadelphia"
  elif [ "$1" == 47 ]; then echo  "Phoenix"
  elif [ "$1" == 48 ]; then echo  "Pittsburgh"
  elif [ "$1" == 49 ]; then echo  "Portland"
  elif [ "$1" == 50 ]; then echo  "Providence"
  elif [ "$1" == 51 ]; then echo  "Raleigh"
  elif [ "$1" == 52 ]; then echo  "Richmond"
  elif [ "$1" == 53 ]; then echo  "Rochester"
  elif [ "$1" == 54 ]; then echo  "Sacramento"
  elif [ "$1" == 55 ]; then echo  "Salt_Lake_City"
  elif [ "$1" == 56 ]; then echo  "San_Antonio"
  elif [ "$1" == 57 ]; then echo  "San_Diego"
  elif [ "$1" == 58 ]; then echo  "San_Francisco"
  elif [ "$1" == 59 ]; then echo  "San_Jose"
  elif [ "$1" == 60 ]; then echo  "Santa_Barbara"
  elif [ "$1" == 61 ]; then echo  "Scranton"
  elif [ "$1" == 62 ]; then echo  "Seattle"
  elif [ "$1" == 63 ]; then echo  "Spokane"
  elif [ "$1" == 64 ]; then echo  "Springfield"
  elif [ "$1" == 65 ]; then echo  "St_Louis"
  elif [ "$1" == 66 ]; then echo  "Syracuse"
  elif [ "$1" == 67 ]; then echo  "Tallahassee"
  elif [ "$1" == 68 ]; then echo  "Tampa"
  elif [ "$1" == 69 ]; then echo  "Toledo"
  elif [ "$1" == 70 ]; then echo  "Tucson"
  elif [ "$1" == 71 ]; then echo  "Tulsa"
  elif [ "$1" == 72 ]; then echo  "Washington_DC"
  elif [ "$1" == 73 ]; then echo  "West_Palm_Beach"
  elif [ "$1" == 74 ]; then echo  "Wilmington"
  else
	echo "Error"
  fi
}


driver_instance=$(curl -s -X GET "http://localhost:8080/VersaStack-web/restapi/driver")
if [ -z "$driver_instance" ]; then 
    echo -n "plugging in metro1 network driver..."
    curl -X POST -d @$domain1_driver --header "Content-Type:application/xml" http://localhost:8080/VersaStack-web/restapi/driver; echo
    echo -n "plugging in coronet network driver..."
    curl -X POST -d @$domain2_driver --header "Content-Type:application/xml" http://localhost:8080/VersaStack-web/restapi/driver; echo
    echo -n "plugging in metro2 network driver..."
    curl -X POST -d @$domain3_driver --header "Content-Type:application/xml" http://localhost:8080/VersaStack-web/restapi/driver; echo
    echo -n "plugging in virtual links connecting 3 domains..."
    curl -X POST -d @$stub_driver --header "Content-Type:application/xml" http://localhost:8080/VersaStack-web/restapi/driver; echo
    echo "Waiting VersaStack to get ready to accept workflow..."
    sleep 120
else
    echo "A driverInstance has existed for topologyUri=$driver_instance"
fi

while true; do
echo "Choose type of Tests you want to run: 
(a)specific source and destination
(b)randomly generate source and destination
followed by [ENTER]: "

read type


case $type in
  [Aa] )
	#specify src
	while true; do
	    echo -n "Enter the domain you want to start with (1: metro1, 2: coronet, 3: metro2): "
	    read src_domain
	    case $src_domain in
		[1] )
			while true; do
    			    echo -n "Enter a number between 1-7 in domain 1: "
			    read src
			    case $src in
				[1-7] )
					echo -e "Source node: domain $src_domain, node $src \n"
					src_port="urn:ogf:network:onos.maxgigapop.net:network$src_domain:of:000000000000000$src:port-s$src-eth1"
					#echo $src_port
					break;;
				* )
					echo -e "\aNot a valid node number"
			    esac
			done
			break;;
		[2] )
			while true; do
			    echo -n "Enter source city name or a number between 1-75: "
  	    		    read src
	    		    case $src in
				[0-9]* )
		    			src_city=$(verify_number $src);;
				[a-zA-Z]* )
		    			src_city="$src";;
	    		    esac
  	    		    src_port=$(verify_city $src_city)
	    		    case $src_port in
				Error )
		    			echo -e "\aNot a valid city or number";;
				* )
					echo -e "Start from domain $src_domain, $src_city \n"
		    			break;;
	    		    esac

			done
			break;;
		[3] )
			while true; do
    			    echo -n "Enter a number between 1-7 in domain 3: "
			    read src
			    case $src in
				[1-7] )
					echo -e "Source node: domain $src_domain, node $src \n"
					src_port="urn:ogf:network:onos.maxgigapop.net:network$src_domain:of:000000000000000$src:port-s$src-eth1"
					#echo $src_port
					break;;
				* )
					echo -e "\aNot a valid node number"
			    esac
			done
			break;;
		* )
			echo -e "\aNot a valid domain number";;
	    esac
	done

	#specify dest
	while true; do
	    echo -n "Enter the domain you want to end with (1: metro1, 2: coronet, 3: metro2): "
	    read dest_domain
	    case $dest_domain in
		[1] )
			while true; do
    			    echo -n "Enter a number between 1-7 in domain 1: "
			    read dest
			    case $dest in
				[1-7] )
					dest_port="urn:ogf:network:onos.maxgigapop.net:network$dest_domain:of:000000000000000$dest:port-s$dest-eth1"
					if [ $dest_port == $src_port ]; then
					    echo -e "\aDestination should not be the same with Srouce"
					else
					    echo -e "Destination node: domain $dest_domain, node $dest \n"
		     			    #echo $src_port
					    break
					fi
					;;
				* )
					echo -e "\aNot a valid node number"
			    esac
			done
			break;;
		[2] )
			while true; do
			    echo -n "Enter destination city name or a number between 1-75: "
  	    		    read dest
	    		    case $dest in
				[0-9]* )
		    			dest_city=$(verify_number $dest);;
				[a-zA-Z]* )
		    			dest_city="$dest";;
	    		    esac
  	    		    dest_port=$(verify_city $dest_city)
	    		    case $dest_port in
				Error )
		    			echo -e "\aNot a valid city or number";;
				* )
					if [ $dest_port == $src_port ]; then
					    echo -e "\aDestination should not be the same with Source"
					else
						echo -e "Destination node: domain $dest_domain, $dest_city \n"
		    				break
					fi
					;;
	    		    esac

			done
			break;;
		[3] )
			while true; do
    			    echo -n "Enter a number between 1-7 in domain 3: "
			    read dest
			    case $dest in
				[1-7] )
					dest_port="urn:ogf:network:onos.maxgigapop.net:network$dest_domain:of:000000000000000$dest:port-s$dest-eth1"
					if [ $dest_port == $src_port ]; then
					    echo -e "\aDestination should not be the same with Srouce"
					else
					    echo -e "Destination node: domain $dest_domain, node $dest \n"
		     			    #echo $src_port
					    break
					fi
					;;
				* )
					echo -e "\aNot a valid node number"
					
			    esac
			done
			break;;
		* )
			echo -e "\aNot a valid domain number";;
	    esac
	done

	#specify protection type
	while true; do
	    echo -n "Enter protection type: (1: SRRG Path, 2: SRRG Path Pair): "
	    read protection
	    case $protection in
		[1] )
		    echo -e "\nSetting up SRRG path (min failure probability) \nfrom $src_port \nto $dest_port\n"
		    protection_value='    spa:value    "SRRG Path" ;'
		    break;;
		[2] )
		    echo -e "\nSetting up SRRG path pair (working+protection) \nfrom $src_port \nto $dest_port\n"
		    protection_value='    spa:value    \"SRRG Path Pair\" ;'
		    break;;
		* )
		    echo -e "\aNot a valid protection type";;
	    esac
	done

	#specify source MAC_address and destination MAC_address
	while true; do
	    echo -n "Enter ETH_SRC_MAC:"
	    read ETH_SRC_MAC
	    case $ETH_SRC_MAC in
		[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9] )
		    #echo -e "\nSetting up ETH_SRC_MAC as $ETH_SRC_MAC"
		    left_mac_address="        spa:value    \&lt;$ETH_SRC_MAC\&gt; ."
		    break;;
		* )
		    echo -e "\aNot a valid ETH_SRC_MAC";;
	    esac
	done

	#specify source MAC_address and destination MAC_address
	while true; do
	    echo -n "Enter ETH_DST_MAC:"
	    read ETH_DST_MAC
	    case $ETH_DST_MAC in
		[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9]:[A-Fa-f0-9][A-Fa-f0-9] )
		    #echo -e "\nSetting up ETH_DST_MAC as $ETH_DST_MAC"
		    right_mac_address="        spa:value    \&lt;$ETH_DST_MAC\&gt; ."
		    if [ "$left_mac_address" == "$right_mac_address" ]; then
			echo -e "\aEnter a different ETH_DST_MAC"
		    else
			break
		    fi
		    ;;
		* )
		    echo -e "\aNot a valid ETH_DST_MAC";;
	    esac
	done
	
	echo -e "\nSetting up ETH_SRC_MAC as $ETH_SRC_MAC, ETH_DST_MAC as $ETH_DST_MAC\n"

	#compute path

	if [ "$src_port" == "Error" ] || [ "$dest_port" == "Error" ]; then
	    echo "Wrong source or destination port"
	    exit 1
	fi
	
	if [ "$protection" != "1" ] && [ "$protection" != "2" ]; then
	    echo "Wrong protection type"
	fi

	START=$(date +%s)

	service_instance="http://localhost:8080/VersaStack-web/restapi/service/instance"
	uuid=$(curl -s -X GET $service_instance)
	new_uuid="<uuid>$uuid</uuid>"

	    sed -i "2s|.*|$new_uuid|" $workflow_file

	    sed -i "24s|.*|$protection_value|" $workflow_file
	
	    src_value="        spa:value    \&lt;$src_port\&gt; ."
	    dst_value="        spa:value    \&lt;$dest_port\&gt; ."
	    sed -i "32s|.*|$src_value|" $workflow_file
	    sed -i "37s|.*|$dst_value|" $workflow_file

	    sed -i "42s|.*|$left_mac_address|" $workflow_file
	    sed -i "47s|.*|$right_mac_address|" $workflow_file


	#Post the abstract model to service instance
	echo "Computing path..."
	curl -X POST -d @$workflow_file --header "Content-Type:application/xml" http://localhost:8080/VersaStack-web/restapi/service/$uuid > /dev/null; 
	
	END=$(date +%s)
	DIFF=$(( $END - $START ))
	echo " (it took $(($DIFF / 60)) minutes and $(($DIFF % 60)) seconds)"

	curl -X PUT http://localhost:8080/VersaStack-web/restapi/service/$uuid/propagate; echo
	curl -X PUT http://localhost:8080/VersaStack-web/restapi/service/$uuid/commit; echo ; echo

	#could delete service instance when bug fixed

	break;;
  
  [Bb] )

	while true; do
  	    echo "Type in a number of how many connections you want to set up "
  	    read number
	    case $number in
		*[a-zA-Z]* )
		    echo -e "\aNot a valid number";;
		[0]* )
		    number=$(sed "s|[0]*||" <<< $number)
		    if [ -z $number ]; then  
			echo -e "\aPlease enter a number larger than 0"
		    else
			break
		    fi
		    ;;
		* )
		    break;;
	    esac
	done

	#setting up each random connections
	for ((i=1; i<=$number; i++)); do
	    
	    #ramdomly generate src and dst port
	    while true; do
	    	src_domain=$((RANDOM%3 + 1))
	    	if [ "$src_domain" == 2 ]; then
		    src_MAX=75
		    break
	   	elif [ "$src_domain" == 3 ] || [ "$src_domain" == 1 ]; then
		    src_MAX=7
		    break
	    	else
		    src_domain=$((RANDOM%3 + 1))
	    	fi
	    done

	    while true; do
	    	dest_domain=$((RANDOM%3 + 1))
	    	if [ "$dest_domain" == 2 ]; then
		    dest_MAX=75
		    break
	   	elif [ "$dest_domain" == 3 ] || [ "$dest_domain" == 1 ]; then
		    dest_MAX=7
		    break
	    	else
		    dest_domain=$((RANDOM%3 + 1))
	    	fi
	    done
	    
	    src=$((RANDOM%$src_MAX + 1))
	    while true; do
		if [ "$src" -gt "$src_MAX" ]; then
		    src=$((RANDOM%$src_MAX + 1))
		else 
		    break
		fi
	    done

	    dest=$((RANDOM%$dest_MAX + 1))
	    while true; do
		if [ "$src_domain" == "$dest_domain" ]; then
		    if [ "$dest" -eq "$src" ] || [ "$dest" -gt "$dest_MAX" ] ; then
		    	dest=$((RANDOM%$dest_MAX + 1))
		    else
			break
		    fi
	    	else
		    if [ "$dest" -gt "$dest_MAX" ]; then
			dest=$((RANDOM%$dest_MAX + 1))
		    else
		        break
		    fi
	        fi
	    done

	    #randomly generate protection type
	    protection=$((RANDOM%2 + 1))
	    while true; do
		if [ "$protection" -gt 2 ]; then
		    protection=$((RANDOM%2 + 1))
		else
		    break
		fi
	    done

	    #hard code only SRRG path
	    protection=1;

	    #randomly generate src and dst mac address
	    ETH_SRC_MAC=""
	    ETH_DST_MAC=""
	    for ((j=1; j<=12; j++)); do
		random_num=$(( RANDOM%16 ))
		if [ "$random_num" == 10 ]; then
		    ETH_SRC_MAC+="A"
		elif [ "$random_num" -eq 11 ]; then
		    ETH_SRC_MAC+="B"
		elif [ "$random_num" -eq 12 ]; then
		    ETH_SRC_MAC+="C"
		elif [ "$random_num" -eq 13 ]; then
		    ETH_SRC_MAC+="D"
		elif [ "$random_num" -eq 14 ]; then
		    ETH_SRC_MAC+="E"
		elif [ "$random_num" -eq 15 ]; then
		    ETH_SRC_MAC+="F"
		else
		    ETH_SRC_MAC+=$random_num
		fi

		if [ "$((j%2))" == 0 ] && [ "$j" -lt 12 ]; then
		    ETH_SRC_MAC+=":"
		fi
	    done
	    while true; do
	    	for ((j=1; j<=12; j++)); do
		    random_num=$(( RANDOM%16 ))
		    if [ "$random_num" == 10 ]; then
		        ETH_DST_MAC+="A"
		    elif [ "$random_num" -eq 11 ]; then
		        ETH_DST_MAC+="B"
		    elif [ "$random_num" -eq 12 ]; then
		        ETH_DST_MAC+="C"
		    elif [ "$random_num" -eq 13 ]; then
		        ETH_DST_MAC+="D"
		    elif [ "$random_num" -eq 14 ]; then
		        ETH_DST_MAC+="E"
		    elif [ "$random_num" -eq 15 ]; then
		        ETH_DST_MAC+="F"
		    else
		        ETH_DST_MAC+=$random_num
		    fi

		    if [ "$((j%2))" == 0 ] && [ "$j" -lt 12 ]; then
		        ETH_DST_MAC+=":"
		    fi
		done
		if [ "$ETH_SRC_MAC" != "$ETH_DST_MAC" ]; then
		    break
		fi
	    done
	    
	    #echo "SRC_MAC: $ETH_SRC_MAC"
	    #echo "DST_MAC: $ETH_DST_MAC"

	    left_mac_address="        spa:value    \&lt;$ETH_SRC_MAC\&gt; ."
	    right_mac_address="        spa:value    \&lt;$ETH_DST_MAC\&gt; ."
	
	    #sleep 10
	    #echo "src: src_domain=$src_domain, src=$src"	
	    #echo "dest: dest_domain=$dest_domain, dest=$dest"
	    #echo "protection=$protection"    
	
	    if [ "$src_domain" == 2 ]; then
	        src_city=$(verify_number $src)
	        src_port=$(verify_city $src_city)	
	    else
	    	src_port="urn:ogf:network:onos.maxgigapop.net:network$src_domain:of:000000000000000$src:port-s$src-eth1"
	    fi
	    if [ "$dest_domain" == 2 ]; then
	    	dest_city=$(verify_number $dest)
	    	dest_port=$(verify_city $dest_city)
	    else
	    	dest_port="urn:ogf:network:onos.maxgigapop.net:network$dest_domain:of:000000000000000$dest:port-s$dest-eth1"
	    fi
	    
	    if [ "$src_port" == "Error" ] || [ "$dst_port" == "Error" ]; then
		echo "Wrong source or destination port"
	   	exit 1
	    fi	 
   
	    if [ "$protection" == 1 ]; then
		echo -e "\nSetting up SRRG path $i \nfrom $src_port with MAC address $ETH_SRC_MAC \nto $dest_port with MAC address $ETH_DST_MAC"
		protection_value='    spa:value    "SRRG Path" ;'
	    elif [ "$protection" == 2 ]; then
		echo -e "\nSetting up SRRG path pair $i from $src_port with MAC address $ETH_SRC_MAC \nto $dest_port with MAC address $ETH_DST_MAC"
		protection_value='    spa:value    \"SRRG Path Pair\" ;'
	    else
		echo "Wrong protection type"
		exit 1
	    fi

	    START=$(date +%s)

	    service_instance="http://localhost:8080/VersaStack-web/restapi/service/instance"
	    uuid=$(curl -s -X GET $service_instance)
	    new_uuid="<uuid>$uuid</uuid>"

	    sed -i "2s|.*|$new_uuid|" $workflow_file

	    sed -i "24s|.*|$protection_value|" $workflow_file
	
	    src_value="        spa:value    \&lt;$src_port\&gt; ."
	    dst_value="        spa:value    \&lt;$dest_port\&gt; ."
	    sed -i "32s|.*|$src_value|" $workflow_file
	    sed -i "37s|.*|$dst_value|" $workflow_file

	    sed -i "42s|.*|$left_mac_address|" $workflow_file
	    sed -i "47s|.*|$right_mac_address|" $workflow_file

	    #Post the abstract model to service instance
	    echo "Computing path..."
	    curl -X POST -d @$workflow_file --header "Content-Type:application/xml" http://localhost:8080/VersaStack-web/restapi/service/$uuid > /dev/null; 
	
	    END=$(date +%s)
	    DIFF=$(( $END - $START ))
	    echo " (it took $(($DIFF / 60)) minutes and $(($DIFF % 60)) seconds)"

	    curl -X PUT http://localhost:8080/VersaStack-web/restapi/service/$uuid/propagate; echo
	    curl -X PUT http://localhost:8080/VersaStack-web/restapi/service/$uuid/commit; echo ; echo

	    #could delete service instance when bug fixed

	    
	done

	break;;
  * )
    echo -e "\aWrong Type!Please answer a/A or b/B";;
esac
done



