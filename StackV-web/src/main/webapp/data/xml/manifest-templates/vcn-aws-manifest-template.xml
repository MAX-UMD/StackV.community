<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<serviceManifest>
<serviceUUID></serviceUUID>
<jsonTemplate>
{
	"Virtual Cloud Networks": [
		{
			"Virtual Network Name": "?vpc?",
			"CIDR (IPv4 Range)": "?vpc_cidr?",
			"External Connection": {
				"Virtual Private Gateway": "?vgw?",
				"Direct Connect VLAN": "?dxvlan?",
				"External Stitching Path": [
					{
						"Switch Port": "?extport?",
						"VLAN Tag": "?extport_vlan?",
						"sparql": "SELECT ?extport ?extport_vlan WHERE {?ext_sw_svc mrs:providesSubnet ?ext_subnet. ?ext_subnet nml:hasBidirectionalPort ?vlan_port. ?vlan_port nml:hasLabel ?vlan_label. ?vlan_label nml:value \"?dxvlan?\". ?extport nml:hasBidirectionalPort ?vlan_port. ?vlan_port nml:hasLabel ?vlan_port_label. ?vlan_port_label nml:value ?extport_vlan. FILTER (?ext_subnet != ?extport)}",
						"required": "true"
					}
				],
				"Instruction": "",
				"sparql": "SELECT ?vgw ?dxvlan ?extport WHERE {?vpc nml:hasBidirectionalPort ?vgw. ?vgw nml:isAlias ?dxvif. ?dxvif mrs:type \"direct-connect-vif\". ?dxvif nml:hasLabel ?dxvif_label. ?dxvif_label nml:value ?dxvlan.}",
				"required": "false"
			},
			"L2 Subnets": [
				{
					"Subnet Name": "?subnet?",
					"CIDR (IPv4 Range)": "?subnet_cidr?",
					"Virtual Machines": [
						{
							"VM Name": "?vm?",
							"Instruction": "To access the VM: ssh -i ?vm_keyname? ec2_user@?vm_public_ip? ",
							"Private IP(s)": [
								{
									"Interface": "?vm_eth?",
									"IP Address": "?vm_private_ip?",
									"sparql": "SELECT DISTINCT ?vm_eth ?vm_private_ip WHERE { ?subnet nml:hasBidirectionalPort ?vm_eth. ?vm nml:hasBidirectionalPort ?vm_eth. ?vm_eth mrs:hasNetworkAddress ?vm_private_na. ?vm_private_na mrs:type \"ipv4:private\". ?vm_private_na mrs:value ?vm_private_ip. } ",
									"required": "false"
								}
							],
							"sparql": "SELECT DISTINCT ?vm ?vm_keyname ?vm_public_ip WHERE { ?subnet nml:hasBidirectionalPort ?vm_eth. ?vm  nml:hasBidirectionalPort ?vm_eth. ?ec2 mrs:providesVM ?vm. OPTIONAL { ?vm mrs:type ?vm_keyname. FILTER (regex(?vm_keyname,'^keypair.+$')) } OPTIONAL { ?vm mrs:hasNetworkAddress ?vm_public_na.?vm_public_na mrs:type \"ipv4:public\".  ?vm_public_na mrs:value ?vm_public_ip. } } ",
							"required": "false"
						}
					],
					"Instruction": "",
					"sparql": "SELECT ?subnet ?subnet_cidr WHERE {?vpc nml:hasService ?vpc_sw_svc. ?vpc_sw_svc mrs:providesSubnet ?subnet. ?subnet mrs:hasNetworkAddress ?subnet_na. ?subnet_na mrs:value ?subnet_cidr.}",
					"required": "false"
				}
			]
		}
	],
	"sparql": "SELECT ?vpc ?vpc_cidr WHERE {?aws nml:hasTopology ?vpc. ?vpc_svc mrs:providesVPC ?vpc. ?vpc nml:hasService ?vpc_rt_svc. ?vpc_rt_svc mrs:providesRoute ?vpc_local_rt. ?vpc_local_rt mrs:nextHop \"local\". ?vpc_local_rt mrs:routeTo ?vpc_cidr_na. ?vpc_cidr_na mrs:type \"ipv4-prefix\". ?vpc_cidr_na  mrs:value ?vpc_cidr. }",
	"required": "true"
}
</jsonTemplate>
</serviceManifest>
